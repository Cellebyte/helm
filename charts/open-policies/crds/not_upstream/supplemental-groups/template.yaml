apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spspallowedsupplementalgroups
spec:
  crd:
    spec:
      names:
        kind: K8sPSPAllowedSupplementalGroups
      validation:
        openAPIV3Schema:
          properties:
            supplementalGroups:
              type: object
              properties:
                rule:
                  type: string
                ranges:
                  type: array
                  items:
                    type: object
                    properties:
                      min:
                        type: integer
                      max:
                        type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspallowedsupplementalgroups

        violation[{"msg": msg}] {
          rule := input.parameters.supplementalGroups.rule
          input_containers[input_container]
          provided_user := run_as_user(input_container.securityContext, input.review)
          not accept_users(rule, provided_user)
          msg := sprintf("Container %v is attempting to run as disallowed user %v", [input_container.name, provided_user])
        }

        violation[{"msg": msg}] {
          rule := input.parameters.supplementalGroups.rule
          input_containers[input_container]
          not run_as_user(input_container.securityContext, input.review)
          rule != "RunAsAny"
          msg := sprintf("Container %v is attempting to run without a required securityContext/supplementalGroups", [input_container.name])
        }

        accept_users("RunAsAny", provided_user) {true}

        accept_users("MustRunAs", provided_user) = res  {
          ranges := input.parameters.supplementalGroups.ranges
          matching := {1 | provided_user >= ranges[j].min; provided_user <= ranges[j].max}
          res := count(matching) > 0
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        run_as_user(container_security_context, review) = run_as_user {
          run_as_user := container_security_context.supplementalGroups
        }

        run_as_user(container_security_context, review) = run_as_user {
          not container_security_context.supplementalGroups
          review.kind.kind == "Pod"
          run_as_user := review.object.spec.securityContext.supplementalGroups
        }
