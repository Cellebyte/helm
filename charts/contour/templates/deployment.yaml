---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "contour.fullname" . }}-contour
  labels: {{- include "contour.labels" . | nindent 4 }}
    component: contour
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # This value of maxSurge means that during a rolling update
      # the new ReplicaSet will be created first.
      maxSurge: 50%
  selector:
    matchLabels: {{- include "contour.matchLabels" . | nindent 6 }}
      component: contour
  template:
    metadata:
      labels: {{- include "contour.labels" . | nindent 8 }}
        component: contour
    spec:
{{- include "contour.imagePullSecrets" . | nindent 6 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: contour
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - serve
        - --incluster
        - --use-extensions-v1beta1-ingress
        - --xds-address=0.0.0.0
        - --xds-port=8001
        - --envoy-service-http-port=80
        - --envoy-service-https-port=443
        - --contour-cafile=/ca/cacert.pem
        - --contour-cert-file=/certs/tls.crt
        - --contour-key-file=/certs/tls.key
        - --config-path=/config/contour.yaml
        command: ["contour"]
        image: {{ include "contour.image" . }}
        imagePullPolicy: {{ .Values.contour.image.pullPolicy }}
        name: contour
        ports:
        - containerPort: 8001
          name: xds
          protocol: TCP
        - containerPort: 8000
          name: http-metrics
          protocol: TCP
      {{- if .Values.contour.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: {{ .Values.contour.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.contour.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.contour.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.contour.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.contour.livenessProbe.failureThreshold }}
      {{- end }}
      {{- if .Values.contour.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: 8001
          initialDelaySeconds: {{ .Values.contour.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.contour.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.contour.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.contour.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.contour.readinessProbe.failureThreshold }}
      {{- end }}
        volumeMounts:
        - name: contourcert
          mountPath: /certs
          readOnly: true
        - name: cacert
          mountPath: /ca
          readOnly: true
        - name: contour-config
          mountPath: /config
          readOnly: true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
      dnsPolicy: ClusterFirst
      serviceAccountName: {{ include "contour.contourServiceAccountName" . }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
      {{- end }}
      volumes:
      - name: contourcert
        secret:
          secretName: contourcert
      - name: cacert
        secret:
          secretName: cacert
      - name: contour-config
        configMap:
          name: {{ include "contour.configMapName" . }}
          defaultMode: 0644
          items:
          - key: contour.yaml
            path: contour.yaml
